# 1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
# заданный случайными числами на промежутке [-100; 100).
# Выведите на экран исходный и отсортированный массивы.
# Сортировка должна быть реализована в виде функции.
# По возможности доработайте алгоритм (сделайте его умнее).

from random import randint
from sys import getsizeof

def bubble_sort(spisok):
    swapped = False
    for i in range(len(spisok) - 1, 0, -1):
        for j in range(i):
            if spisok[j] < spisok[j + 1]:
                spisok[j + 1], spisok[j] = spisok[j], spisok[j + 1]
                swapped = True
        if swapped:
            swapped = False
        else:
            break
    print(getsizeof(spisok))
    print(getsizeof(swapped))
    print(getsizeof(45))
    return spisok


if __name__ == '__main__':

    s = [randint(-100, 99) for i in range(20)]
    print(s)
    print(bubble_sort(s))
    #
    # [-23, 95, 61, 69, 42, -84, -4, -66, 28, -32, 2, 36, 70, 5, -94, -33, 94, 44, -54, -75] - исходный список
    # 264 байт для списка из 20 элементов, 20 ссылки на элементы(160 байт), 104 ссылка на сам список, + 20 * 28 для самих элементов, итого 264 + 560 = 824 байта.
    # 24 - булева переменная swapped
    # 28 - размер целочисленного
    # [95, 94, 70, 69, 61, 44, 42, 36, 28, 5, 2, -4, -23, -32, -33, -54, -66, -75, -84, -94] - отсортированный список в порядке убывания методом пузырька

    # Пространственная сложность: линейная O(n)
    # Сложность алгоритма оцениваю как O(n**2) - квадратичная.
    
# FIN
